/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.fattazzo.pizzashop.controller.api;

import com.fattazzo.pizzashop.model.api.Item;
import com.fattazzo.pizzashop.model.api.ItemProduct;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "Products", description = "the Products API")
public interface ProductsApi {

    @ApiOperation(value = "Create a ItemProduct", nickname = "createItemProduct", notes = "Creates a new instance of a `ItemProduct`.", response = ItemProduct.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response.", response = ItemProduct.class) })
    @RequestMapping(value = "/product/items",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ItemProduct> createItemProduct(@ApiParam(value = "A new `ItemProduct` to be created." ,required=true )  @Valid @RequestBody ItemProduct body
);


    @ApiOperation(value = "Delete a ItemProduct", nickname = "deleteItemProduct", notes = "Deletes an existing `ItemProduct`.", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response.") })
    @RequestMapping(value = "/product/items/{itemId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteItemProduct(@ApiParam(value = "A unique identifier for a `ItemProduct`.",required=true) @PathVariable("itemId") Integer itemId
);


    @ApiOperation(value = "Delete a ItemProduct image", nickname = "deleteItemProductImage", notes = "Deletes an existing `ItemProduct` image.", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response.") })
    @RequestMapping(value = "/product/items/{itemId}/image",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteItemProductImage(@ApiParam(value = "A unique identifier for a `ItemProduct`.",required=true) @PathVariable("itemId") Integer itemId
);


    @ApiOperation(value = "Get a ItemProduct", nickname = "getItemProduct", notes = "Gets the details of a single instance of a `ItemProduct`.", response = ItemProduct.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns a single `ItemProduct`.", response = ItemProduct.class) })
    @RequestMapping(value = "/product/items/{itemId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ItemProduct> getItemProduct(@ApiParam(value = "A unique identifier for a `ItemProduct`.",required=true) @PathVariable("itemId") Integer itemId
,@ApiParam(value = "Include prices from disabled categories and prices equal to zero", defaultValue = "false") @Valid @RequestParam(value = "includeInvalidPrices", required = false, defaultValue="false") Boolean includeInvalidPrices
);


    @ApiOperation(value = "Get a ItemProduct image", nickname = "getItemProductImage", notes = "Gets a `ItemProduct` image.", response = Resource.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "`ItemProduct` image", response = Resource.class),
        @ApiResponse(code = 204, message = "`ItemProduct` image not present") })
    @RequestMapping(value = "/product/items/{itemId}/image",
        produces = { "image/png" }, 
        method = RequestMethod.GET)
    ResponseEntity<Resource> getItemProductImage(@ApiParam(value = "A unique identifier for a `ItemProduct`.",required=true) @PathVariable("itemId") Integer itemId
);


    @ApiOperation(value = "List All ItemProduct", nickname = "getItemProducts", notes = "Gets a list of all `ItemProduct` entities.", response = Item.class, responseContainer = "List", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns an array of `Item` entities.", response = Item.class, responseContainer = "List") })
    @RequestMapping(value = "/product/items",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Item>> getItemProducts(@ApiParam(value = "If true, the list of all entities include enabled and disabled `Product`" ) @RequestHeader(value="includeDisabled", required=false) Boolean includeDisabled
,@ApiParam(value = "Filter all products by the category if present" ) @RequestHeader(value="categoryId", required=false) Integer categoryId
);


    @ApiOperation(value = "Update a ItemProduct", nickname = "updateItemProduct", notes = "Updates an existing `ItemProduct`.", response = ItemProduct.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Successful response.", response = ItemProduct.class) })
    @RequestMapping(value = "/product/items/{itemId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<ItemProduct> updateItemProduct(@ApiParam(value = "Updated `ItemProduct` information." ,required=true )  @Valid @RequestBody ItemProduct body
,@ApiParam(value = "A unique identifier for a `ItemProduct`.",required=true) @PathVariable("itemId") Integer itemId
);


    @ApiOperation(value = "Update a ItemProduct image", nickname = "updateItemProductImage", notes = "Updates an existing `ItemProduct` image.", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response") })
    @RequestMapping(value = "/product/items/{itemId}/image",
        consumes = { "multipart/form-data" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateItemProductImage(@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile file
,@ApiParam(value = "A unique identifier for a `ItemProduct`.",required=true) @PathVariable("itemId") Integer itemId
);

}
