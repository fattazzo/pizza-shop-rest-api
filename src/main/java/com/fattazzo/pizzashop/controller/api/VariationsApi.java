/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.fattazzo.pizzashop.controller.api;

import com.fattazzo.pizzashop.model.api.Topping;
import com.fattazzo.pizzashop.model.api.VariationDough;
import com.fattazzo.pizzashop.model.api.VariationSize;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import java.util.List;
import java.util.Map;
@Api(value = "Variations", description = "the Variations API")
public interface VariationsApi {

    @ApiOperation(value = "Create a Dough", nickname = "createDough", notes = "Creates a new instance of a `Dough`.", response = VariationDough.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "variations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response.", response = VariationDough.class) })
    @RequestMapping(value = "/variations/doughs",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<VariationDough> createDough(@ApiParam(value = "A new `Dough` to be created." ,required=true )   @RequestBody VariationDough body
);


    @ApiOperation(value = "Create a Size", nickname = "createSize", notes = "Creates a new instance of a `Size`.", response = VariationSize.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "variations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response.", response = VariationSize.class) })
    @RequestMapping(value = "/variations/sizes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<VariationSize> createSize(@ApiParam(value = "A new `Size` to be created." ,required=true )   @RequestBody VariationSize body
);


    @ApiOperation(value = "Create a Topping", nickname = "createTopping", notes = "Creates a new instance of a `Topping`.", response = Topping.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "variations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response.", response = Topping.class) })
    @RequestMapping(value = "/variations/toppings",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Topping> createTopping(@ApiParam(value = "A new `Topping` to be created." ,required=true )   @RequestBody Topping body
);


    @ApiOperation(value = "Delete a Dough", nickname = "deleteDough", notes = "Deletes an existing `Dough`.", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "variations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response.") })
    @RequestMapping(value = "/variations/doughs/{doughId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteDough(@ApiParam(value = "A unique identifier for a `Dough`.",required=true) @PathVariable("doughId") Integer doughId
);


    @ApiOperation(value = "Delete a Size", nickname = "deleteSize", notes = "Deletes an existing `Size`.", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "variations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response.") })
    @RequestMapping(value = "/variations/sizes/{sizeId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSize(@ApiParam(value = "A unique identifier for a `Size`.",required=true) @PathVariable("sizeId") Integer sizeId
);


    @ApiOperation(value = "Delete a Topping", nickname = "deleteTopping", notes = "Deletes an existing `Topping`.", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "variations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response.") })
    @RequestMapping(value = "/variations/toppings/{toppingId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTopping(@ApiParam(value = "A unique identifier for a `Topping`.",required=true) @PathVariable("toppingId") Integer toppingId
);


    @ApiOperation(value = "Get a Dough", nickname = "getDough", notes = "Gets the details of a single instance of a `Dough`.", response = VariationDough.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "variations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns a single `Dough`.", response = VariationDough.class) })
    @RequestMapping(value = "/variations/doughs/{doughId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<VariationDough> getDough(@ApiParam(value = "A unique identifier for a `Dough`.",required=true) @PathVariable("doughId") Integer doughId
);


    @ApiOperation(value = "List All doughs", nickname = "getDoughs", notes = "Gets a list of all `Dough` entities.", response = VariationDough.class, responseContainer = "List", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "variations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns an array of `Dough` entities.", response = VariationDough.class, responseContainer = "List") })
    @RequestMapping(value = "/variations/doughs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<VariationDough>> getDoughs(@ApiParam(value = "If true, the list of all entities include enabled and disabled `Dough`")  @RequestParam(value = "includeDisabled", required = false) Boolean includeDisabled
);


    @ApiOperation(value = "Get a Size", nickname = "getSize", notes = "Gets the details of a single instance of a `Size`.", response = VariationSize.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "variations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns a single `Size`.", response = VariationSize.class) })
    @RequestMapping(value = "/variations/sizes/{sizeId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<VariationSize> getSize(@ApiParam(value = "A unique identifier for a `Size`.",required=true) @PathVariable("sizeId") Integer sizeId
);


    @ApiOperation(value = "List All sizes", nickname = "getSizes", notes = "Gets a list of all `Size` entities.", response = VariationSize.class, responseContainer = "List", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "variations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns an array of `Size` entities.", response = VariationSize.class, responseContainer = "List") })
    @RequestMapping(value = "/variations/sizes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<VariationSize>> getSizes(@ApiParam(value = "If true, the list of all entities include enabled and disabled `Size`")  @RequestParam(value = "includeDisabled", required = false) Boolean includeDisabled
);


    @ApiOperation(value = "Get a Topping", nickname = "getTopping", notes = "Gets the details of a single instance of a `Topping`.", response = Topping.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "variations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns a single `Topping`.", response = Topping.class) })
    @RequestMapping(value = "/variations/toppings/{toppingId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Topping> getTopping(@ApiParam(value = "A unique identifier for a `Topping`.",required=true) @PathVariable("toppingId") Integer toppingId
);


    @ApiOperation(value = "List All toppings", nickname = "getToppings", notes = "Gets a list of all `Topping` entities.", response = Topping.class, responseContainer = "List", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "variations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns an array of `Topping` entities.", response = Topping.class, responseContainer = "List") })
    @RequestMapping(value = "/variations/toppings",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Topping>> getToppings(@ApiParam(value = "If true, the list of all entities include enabled and disabled `Topping`")  @RequestParam(value = "includeDisabled", required = false) Boolean includeDisabled
);


    @ApiOperation(value = "Update a Dough", nickname = "updateDough", notes = "Updates an existing `Dough`.", response = VariationDough.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "variations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Successful response.", response = VariationDough.class) })
    @RequestMapping(value = "/variations/doughs/{doughId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<VariationDough> updateDough(@ApiParam(value = "Updated `Dough` information." ,required=true )   @RequestBody VariationDough body
,@ApiParam(value = "A unique identifier for a `Dough`.",required=true) @PathVariable("doughId") Integer doughId
);


    @ApiOperation(value = "Update a Size", nickname = "updateSize", notes = "Updates an existing `Size`.", response = VariationSize.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "variations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Successful response.", response = VariationSize.class) })
    @RequestMapping(value = "/variations/sizes/{sizeId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<VariationSize> updateSize(@ApiParam(value = "Updated `Size` information." ,required=true )   @RequestBody VariationSize body
,@ApiParam(value = "A unique identifier for a `Size`.",required=true) @PathVariable("sizeId") Integer sizeId
);


    @ApiOperation(value = "Update a Topping", nickname = "updateTopping", notes = "Updates an existing `Topping`.", response = Topping.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "variations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Successful response.", response = Topping.class) })
    @RequestMapping(value = "/variations/toppings/{toppingId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Topping> updateTopping(@ApiParam(value = "Updated `Topping` information." ,required=true )   @RequestBody Topping body
,@ApiParam(value = "A unique identifier for a `Topping`.",required=true) @PathVariable("toppingId") Integer toppingId
);

}
