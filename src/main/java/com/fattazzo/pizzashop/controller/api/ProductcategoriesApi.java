/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.fattazzo.pizzashop.controller.api;

import com.fattazzo.pizzashop.model.api.Category;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "Productcategories", description = "the Productcategories API")
public interface ProductcategoriesApi {

    @ApiOperation(value = "Create a product Category", nickname = "createProductCategory", notes = "Creates a new instance of a product `Category`.", response = Category.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "productcategories", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response.", response = Category.class) })
    @RequestMapping(value = "/product/categories/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Category> createProductCategory(@ApiParam(value = "A new product `Category` to be created." ,required=true )  @Valid @RequestBody Category body
);


    @ApiOperation(value = "Delete a product Category", nickname = "deleteProductCategory", notes = "Deletes an existing product `Category`.", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "productcategories", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response.") })
    @RequestMapping(value = "/product/categories/{categoryId}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProductCategory(@ApiParam(value = "A unique identifier for a `Category`.",required=true) @PathVariable("categoryId") Integer categoryId
);


    @ApiOperation(value = "List All product categories", nickname = "getProductCategories", notes = "Gets a list of all product `Category` entities.", response = Category.class, responseContainer = "List", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "productcategories", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns an array of `Category` entities.", response = Category.class, responseContainer = "List") })
    @RequestMapping(value = "/product/categories/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Category>> getProductCategories(@ApiParam(value = "If true, the list of all entities include enabled and disabled `Category`" ) @RequestHeader(value="includeDisabled", required=false) Boolean includeDisabled
);


    @ApiOperation(value = "Get a product Category", nickname = "getProductCategory", notes = "Gets the details of a single instance of a product `Category`.", response = Category.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "productcategories", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns a single `Category`.", response = Category.class) })
    @RequestMapping(value = "/product/categories/{categoryId}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Category> getProductCategory(@ApiParam(value = "A unique identifier for a `Category`.",required=true) @PathVariable("categoryId") Integer categoryId
);


    @ApiOperation(value = "Update a product Category", nickname = "updateProductCategory", notes = "Updates an existing product `Category`.", response = Category.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "productcategories", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Successful response.", response = Category.class) })
    @RequestMapping(value = "/product/categories/{categoryId}/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Category> updateProductCategory(@ApiParam(value = "Updated `Category` information." ,required=true )  @Valid @RequestBody Category body
,@ApiParam(value = "A unique identifier for a `Category`.",required=true) @PathVariable("categoryId") Integer categoryId
);

}
