/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.fattazzo.pizzashop.controller.api;

import com.fattazzo.pizzashop.model.api.VariationProduct;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@Api(value = "Productvariations", description = "the Productvariations API")
public interface ProductvariationsApi {

    Logger log = LoggerFactory.getLogger(ProductvariationsApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Create a VariationProduct", nickname = "createVariationProduct", notes = "Creates a new instance of a `VariationProduct`.", response = VariationProduct.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "productvariations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response.", response = VariationProduct.class) })
    @RequestMapping(value = "/product/variations",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<VariationProduct> createVariationProduct(@ApiParam(value = "A new `VariationProduct` to be created." ,required=true )  @Valid @RequestBody VariationProduct body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 0,\n  \"enabled\" : true,\n  \"order\" : 6\n}", VariationProduct.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProductvariationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Delete a VariationProduct", nickname = "deleteVariationProduct", notes = "Deletes an existing `VariationProduct`.", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "productvariations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response.") })
    @RequestMapping(value = "/product/variations/{variationId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteVariationProduct(@ApiParam(value = "A unique identifier for a `VariationProduct`.",required=true) @PathVariable("variationId") Integer variationId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProductvariationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get a VariationProduct", nickname = "getVariationProduct", notes = "Gets the details of a single instance of a `VariationProduct`.", response = VariationProduct.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "productvariations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns a single `VariationProduct`.", response = VariationProduct.class) })
    @RequestMapping(value = "/product/variations/{variationId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<VariationProduct> getVariationProduct(@ApiParam(value = "A unique identifier for a `VariationProduct`.",required=true) @PathVariable("variationId") Integer variationId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 0,\n  \"enabled\" : true,\n  \"order\" : 6\n}", VariationProduct.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProductvariationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "List All VariationProducts", nickname = "getVariationProducts", notes = "Gets a list of all `VariationProduct` entities.", response = VariationProduct.class, responseContainer = "List", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "productvariations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns an array of `VariationProduct` entities.", response = VariationProduct.class, responseContainer = "List") })
    @RequestMapping(value = "/product/variations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<VariationProduct>> getVariationProducts(@ApiParam(value = "If true, the list of all entities include enabled and disabled `VariationProduct`") @Valid @RequestParam(value = "includeDisabled", required = false) Boolean includeDisabled
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 0,\n  \"enabled\" : true,\n  \"order\" : 6\n}, {\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 0,\n  \"enabled\" : true,\n  \"order\" : 6\n} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProductvariationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update a VariationProduct", nickname = "updateVariationProduct", notes = "Updates an existing `VariationProduct`.", response = VariationProduct.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "productvariations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Successful response.", response = VariationProduct.class) })
    @RequestMapping(value = "/product/variations/{variationId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<VariationProduct> updateVariationProduct(@ApiParam(value = "Updated `VariationProduct` information." ,required=true )  @Valid @RequestBody VariationProduct body
,@ApiParam(value = "A unique identifier for a `VariationProduct`.",required=true) @PathVariable("variationId") Integer variationId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 0,\n  \"enabled\" : true,\n  \"order\" : 6\n}", VariationProduct.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProductvariationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
