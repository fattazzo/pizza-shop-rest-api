/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.fattazzo.pizzashop.controller.api;

import com.fattazzo.pizzashop.model.api.Item;
import com.fattazzo.pizzashop.model.api.ItemPizza;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "Pizzas", description = "the Pizzas API")
public interface PizzasApi {

    @ApiOperation(value = "Create a ItemPizza", nickname = "createItemPizza", notes = "Creates a new instance of a `ItemPizza`.", response = ItemPizza.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "pizzas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response.", response = ItemPizza.class) })
    @RequestMapping(value = "/pizza/items",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ItemPizza> createItemPizza(@ApiParam(value = "A new `ItemPizza` to be created." ,required=true )  @Valid @RequestBody ItemPizza body
);


    @ApiOperation(value = "Delete a ItemPizza", nickname = "deleteItemPizza", notes = "Deletes an existing `ItemPizza`.", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "pizzas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response.") })
    @RequestMapping(value = "/pizza/items/{itemId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteItemPizza(@ApiParam(value = "A unique identifier for a `ItemPizza`.",required=true) @PathVariable("itemId") Integer itemId
);


    @ApiOperation(value = "Delete a ItemPizza image", nickname = "deleteItemPizzaImage", notes = "Deletes an existing `ItemPizza` image.", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "pizzas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response.") })
    @RequestMapping(value = "/pizza/items/{itemId}/image",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteItemPizzaImage(@ApiParam(value = "A unique identifier for a `ItemPizza`.",required=true) @PathVariable("itemId") Integer itemId
);


    @ApiOperation(value = "Get a ItemPizza", nickname = "getItemPizza", notes = "Gets the details of a single instance of a `ItemPizza`.", response = ItemPizza.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "pizzas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns a single `ItemPizza`.", response = ItemPizza.class) })
    @RequestMapping(value = "/pizza/items/{itemId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ItemPizza> getItemPizza(@ApiParam(value = "A unique identifier for a `ItemPizza`.",required=true) @PathVariable("itemId") Integer itemId
,@ApiParam(value = "Include prices from disabled categories and prices equal to zero", defaultValue = "false") @Valid @RequestParam(value = "includeInvalidPrices", required = false, defaultValue="false") Boolean includeInvalidPrices
);


    @ApiOperation(value = "Get a ItemPizza image", nickname = "getItemPizzaImage", notes = "Gets a `ItemPizza` image.", response = Resource.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "pizzas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "`ItemPizza` image", response = Resource.class),
        @ApiResponse(code = 204, message = "`ItemPizza` image not present") })
    @RequestMapping(value = "/pizza/items/{itemId}/image",
        produces = { "image/png" }, 
        method = RequestMethod.GET)
    ResponseEntity<Resource> getItemPizzaImage(@ApiParam(value = "A unique identifier for a `ItemPizza`.",required=true) @PathVariable("itemId") Integer itemId
);


    @ApiOperation(value = "List All ItemPizzas", nickname = "getItemPizzas", notes = "Gets a list of all `ItemPizza` entities.", response = Item.class, responseContainer = "List", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "pizzas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns an array of `Item` entities.", response = Item.class, responseContainer = "List") })
    @RequestMapping(value = "/pizza/items",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Item>> getItemPizzas(@ApiParam(value = "If true, the list of all entities include enabled and disabled `Product`" ) @RequestHeader(value="includeDisabled", required=false) Boolean includeDisabled
,@ApiParam(value = "Filter all products by the category if present" ) @RequestHeader(value="categoryId", required=false) Integer categoryId
);


    @ApiOperation(value = "Update a ItemPizza", nickname = "updateItemPizza", notes = "Updates an existing `ItemPizza`.", response = ItemPizza.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "pizzas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Successful response.", response = ItemPizza.class) })
    @RequestMapping(value = "/pizza/items/{itemId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<ItemPizza> updateItemPizza(@ApiParam(value = "Updated `ItemPizza` information." ,required=true )  @Valid @RequestBody ItemPizza body
,@ApiParam(value = "A unique identifier for a `ItemPizza`.",required=true) @PathVariable("itemId") Integer itemId
);


    @ApiOperation(value = "Update a ItemPizza image", nickname = "updateItemPizzaImage", notes = "Updates an existing `ItemPizza` image.", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "pizzas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response") })
    @RequestMapping(value = "/pizza/items/{itemId}/image",
        consumes = { "multipart/form-data" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateItemPizzaImage(@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile file
,@ApiParam(value = "A unique identifier for a `ItemPizza`.",required=true) @PathVariable("itemId") Integer itemId
);

}
